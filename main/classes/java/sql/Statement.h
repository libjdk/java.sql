#ifndef _java_sql_Statement_h_
#define _java_sql_Statement_h_
//$ interface java.sql.Statement
//$ extends java.sql.Wrapper,java.lang.AutoCloseable

#include <java/lang/Array.h>
#include <java/lang/AutoCloseable.h>
#include <java/sql/Wrapper.h>

#pragma push_macro("CLOSE_ALL_RESULTS")
#undef CLOSE_ALL_RESULTS
#pragma push_macro("CLOSE_CURRENT_RESULT")
#undef CLOSE_CURRENT_RESULT
#pragma push_macro("EXECUTE_FAILED")
#undef EXECUTE_FAILED
#pragma push_macro("KEEP_CURRENT_RESULT")
#undef KEEP_CURRENT_RESULT
#pragma push_macro("NO_GENERATED_KEYS")
#undef NO_GENERATED_KEYS
#pragma push_macro("RETURN_GENERATED_KEYS")
#undef RETURN_GENERATED_KEYS
#pragma push_macro("SUCCESS_NO_INFO")
#undef SUCCESS_NO_INFO

namespace java {
	namespace sql {
		class Connection;
		class ResultSet;
		class SQLWarning;
	}
}

namespace java {
	namespace sql {

class $export Statement : public ::java::sql::Wrapper, public ::java::lang::AutoCloseable {
	$interface(Statement, $NO_CLASS_INIT, ::java::sql::Wrapper, ::java::lang::AutoCloseable)
public:
	virtual ::java::lang::Object0* toObject0$() const override {return (::java::lang::Object0*)(void*)this;}
	virtual void addBatch($String* sql) {}
	virtual void cancel() {}
	virtual void clearBatch() {}
	virtual void clearWarnings() {}
	virtual $Object* clone() override;
	virtual void close() override {}
	virtual void closeOnCompletion() {}
	virtual $String* enquoteIdentifier($String* identifier, bool alwaysQuote);
	virtual $String* enquoteLiteral($String* val);
	virtual $String* enquoteNCharLiteral($String* val);
	virtual bool equals(Object$* arg0) override;
	virtual bool execute($String* sql) {return false;}
	virtual bool execute($String* sql, int32_t autoGeneratedKeys) {return false;}
	virtual bool execute($String* sql, $ints* columnIndexes) {return false;}
	virtual bool execute($String* sql, $StringArray* columnNames) {return false;}
	virtual $ints* executeBatch() {return nullptr;}
	virtual $longs* executeLargeBatch();
	virtual int64_t executeLargeUpdate($String* sql);
	virtual int64_t executeLargeUpdate($String* sql, int32_t autoGeneratedKeys);
	virtual int64_t executeLargeUpdate($String* sql, $ints* columnIndexes);
	virtual int64_t executeLargeUpdate($String* sql, $StringArray* columnNames);
	virtual ::java::sql::ResultSet* executeQuery($String* sql) {return nullptr;}
	virtual int32_t executeUpdate($String* sql) {return 0;}
	virtual int32_t executeUpdate($String* sql, int32_t autoGeneratedKeys) {return 0;}
	virtual int32_t executeUpdate($String* sql, $ints* columnIndexes) {return 0;}
	virtual int32_t executeUpdate($String* sql, $StringArray* columnNames) {return 0;}
	virtual void finalize() override;
	virtual ::java::sql::Connection* getConnection() {return nullptr;}
	virtual int32_t getFetchDirection() {return 0;}
	virtual int32_t getFetchSize() {return 0;}
	virtual ::java::sql::ResultSet* getGeneratedKeys() {return nullptr;}
	virtual int64_t getLargeMaxRows();
	virtual int64_t getLargeUpdateCount();
	virtual int32_t getMaxFieldSize() {return 0;}
	virtual int32_t getMaxRows() {return 0;}
	virtual bool getMoreResults() {return false;}
	virtual bool getMoreResults(int32_t current) {return false;}
	virtual int32_t getQueryTimeout() {return 0;}
	virtual ::java::sql::ResultSet* getResultSet() {return nullptr;}
	virtual int32_t getResultSetConcurrency() {return 0;}
	virtual int32_t getResultSetHoldability() {return 0;}
	virtual int32_t getResultSetType() {return 0;}
	virtual int32_t getUpdateCount() {return 0;}
	virtual ::java::sql::SQLWarning* getWarnings() {return nullptr;}
	virtual int32_t hashCode() override;
	virtual bool isCloseOnCompletion() {return false;}
	virtual bool isClosed() {return false;}
	virtual bool isPoolable() {return false;}
	virtual bool isSimpleIdentifier($String* identifier);
	virtual void setCursorName($String* name) {}
	virtual void setEscapeProcessing(bool enable) {}
	virtual void setFetchDirection(int32_t direction) {}
	virtual void setFetchSize(int32_t rows) {}
	virtual void setLargeMaxRows(int64_t max);
	virtual void setMaxFieldSize(int32_t max) {}
	virtual void setMaxRows(int32_t max) {}
	virtual void setPoolable(bool poolable) {}
	virtual void setQueryTimeout(int32_t seconds) {}
	virtual $String* toString() override;
	static const int32_t CLOSE_CURRENT_RESULT = 1;
	static const int32_t KEEP_CURRENT_RESULT = 2;
	static const int32_t CLOSE_ALL_RESULTS = 3;
	static const int32_t SUCCESS_NO_INFO = (-2);
	static const int32_t EXECUTE_FAILED = (-3);
	static const int32_t RETURN_GENERATED_KEYS = 1;
	static const int32_t NO_GENERATED_KEYS = 2;
};

	} // sql
} // java

#pragma pop_macro("CLOSE_ALL_RESULTS")
#pragma pop_macro("CLOSE_CURRENT_RESULT")
#pragma pop_macro("EXECUTE_FAILED")
#pragma pop_macro("KEEP_CURRENT_RESULT")
#pragma pop_macro("NO_GENERATED_KEYS")
#pragma pop_macro("RETURN_GENERATED_KEYS")
#pragma pop_macro("SUCCESS_NO_INFO")

#endif // _java_sql_Statement_h_