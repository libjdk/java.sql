#ifndef _java_sql_Connection_h_
#define _java_sql_Connection_h_
//$ interface java.sql.Connection
//$ extends java.sql.Wrapper,java.lang.AutoCloseable

#include <java/lang/Array.h>
#include <java/lang/AutoCloseable.h>
#include <java/sql/Wrapper.h>

#pragma push_macro("TRANSACTION_NONE")
#undef TRANSACTION_NONE
#pragma push_macro("TRANSACTION_READ_COMMITTED")
#undef TRANSACTION_READ_COMMITTED
#pragma push_macro("TRANSACTION_READ_UNCOMMITTED")
#undef TRANSACTION_READ_UNCOMMITTED
#pragma push_macro("TRANSACTION_REPEATABLE_READ")
#undef TRANSACTION_REPEATABLE_READ
#pragma push_macro("TRANSACTION_SERIALIZABLE")
#undef TRANSACTION_SERIALIZABLE

namespace java {
	namespace sql {
		class Array;
		class Blob;
		class CallableStatement;
		class Clob;
		class DatabaseMetaData;
		class NClob;
		class PreparedStatement;
		class SQLWarning;
		class SQLXML;
		class Savepoint;
		class ShardingKey;
		class Statement;
		class Struct;
	}
}
namespace java {
	namespace util {
		class Map;
		class Properties;
	}
}
namespace java {
	namespace util {
		namespace concurrent {
			class Executor;
		}
	}
}

namespace java {
	namespace sql {

class $export Connection : public ::java::sql::Wrapper, public ::java::lang::AutoCloseable {
	$interface(Connection, $NO_CLASS_INIT, ::java::sql::Wrapper, ::java::lang::AutoCloseable)
public:
	virtual ::java::lang::Object0* toObject0$() const override {return (::java::lang::Object0*)(void*)this;}
	virtual void abort(::java::util::concurrent::Executor* executor) {}
	virtual void beginRequest();
	virtual void clearWarnings() {}
	virtual $Object* clone() override;
	virtual void close() override {}
	virtual void commit() {}
	virtual ::java::sql::Array* createArrayOf($String* typeName, $ObjectArray* elements) {return nullptr;}
	virtual ::java::sql::Blob* createBlob() {return nullptr;}
	virtual ::java::sql::Clob* createClob() {return nullptr;}
	virtual ::java::sql::NClob* createNClob() {return nullptr;}
	virtual ::java::sql::SQLXML* createSQLXML() {return nullptr;}
	virtual ::java::sql::Statement* createStatement() {return nullptr;}
	virtual ::java::sql::Statement* createStatement(int32_t resultSetType, int32_t resultSetConcurrency) {return nullptr;}
	virtual ::java::sql::Statement* createStatement(int32_t resultSetType, int32_t resultSetConcurrency, int32_t resultSetHoldability) {return nullptr;}
	virtual ::java::sql::Struct* createStruct($String* typeName, $ObjectArray* attributes) {return nullptr;}
	virtual void endRequest();
	virtual bool equals(Object$* arg0) override;
	virtual void finalize() override;
	virtual bool getAutoCommit() {return false;}
	virtual $String* getCatalog() {return nullptr;}
	virtual $String* getClientInfo($String* name) {return nullptr;}
	virtual ::java::util::Properties* getClientInfo() {return nullptr;}
	virtual int32_t getHoldability() {return 0;}
	virtual ::java::sql::DatabaseMetaData* getMetaData() {return nullptr;}
	virtual int32_t getNetworkTimeout() {return 0;}
	virtual $String* getSchema() {return nullptr;}
	virtual int32_t getTransactionIsolation() {return 0;}
	virtual ::java::util::Map* getTypeMap() {return nullptr;}
	virtual ::java::sql::SQLWarning* getWarnings() {return nullptr;}
	virtual int32_t hashCode() override;
	virtual bool isClosed() {return false;}
	virtual bool isReadOnly() {return false;}
	virtual bool isValid(int32_t timeout) {return false;}
	virtual $String* nativeSQL($String* sql) {return nullptr;}
	virtual ::java::sql::CallableStatement* prepareCall($String* sql) {return nullptr;}
	virtual ::java::sql::CallableStatement* prepareCall($String* sql, int32_t resultSetType, int32_t resultSetConcurrency) {return nullptr;}
	virtual ::java::sql::CallableStatement* prepareCall($String* sql, int32_t resultSetType, int32_t resultSetConcurrency, int32_t resultSetHoldability) {return nullptr;}
	virtual ::java::sql::PreparedStatement* prepareStatement($String* sql) {return nullptr;}
	virtual ::java::sql::PreparedStatement* prepareStatement($String* sql, int32_t resultSetType, int32_t resultSetConcurrency) {return nullptr;}
	virtual ::java::sql::PreparedStatement* prepareStatement($String* sql, int32_t resultSetType, int32_t resultSetConcurrency, int32_t resultSetHoldability) {return nullptr;}
	virtual ::java::sql::PreparedStatement* prepareStatement($String* sql, int32_t autoGeneratedKeys) {return nullptr;}
	virtual ::java::sql::PreparedStatement* prepareStatement($String* sql, $ints* columnIndexes) {return nullptr;}
	virtual ::java::sql::PreparedStatement* prepareStatement($String* sql, $StringArray* columnNames) {return nullptr;}
	virtual void releaseSavepoint(::java::sql::Savepoint* savepoint) {}
	virtual void rollback() {}
	virtual void rollback(::java::sql::Savepoint* savepoint) {}
	virtual void setAutoCommit(bool autoCommit) {}
	virtual void setCatalog($String* catalog) {}
	virtual void setClientInfo($String* name, $String* value) {}
	virtual void setClientInfo(::java::util::Properties* properties) {}
	virtual void setHoldability(int32_t holdability) {}
	virtual void setNetworkTimeout(::java::util::concurrent::Executor* executor, int32_t milliseconds) {}
	virtual void setReadOnly(bool readOnly) {}
	virtual ::java::sql::Savepoint* setSavepoint() {return nullptr;}
	virtual ::java::sql::Savepoint* setSavepoint($String* name) {return nullptr;}
	virtual void setSchema($String* schema) {}
	virtual void setShardingKey(::java::sql::ShardingKey* shardingKey, ::java::sql::ShardingKey* superShardingKey);
	virtual void setShardingKey(::java::sql::ShardingKey* shardingKey);
	virtual bool setShardingKeyIfValid(::java::sql::ShardingKey* shardingKey, ::java::sql::ShardingKey* superShardingKey, int32_t timeout);
	virtual bool setShardingKeyIfValid(::java::sql::ShardingKey* shardingKey, int32_t timeout);
	virtual void setTransactionIsolation(int32_t level) {}
	virtual void setTypeMap(::java::util::Map* map) {}
	virtual $String* toString() override;
	static const int32_t TRANSACTION_NONE = 0;
	static const int32_t TRANSACTION_READ_UNCOMMITTED = 1;
	static const int32_t TRANSACTION_READ_COMMITTED = 2;
	static const int32_t TRANSACTION_REPEATABLE_READ = 4;
	static const int32_t TRANSACTION_SERIALIZABLE = 8;
};

	} // sql
} // java

#pragma pop_macro("TRANSACTION_NONE")
#pragma pop_macro("TRANSACTION_READ_COMMITTED")
#pragma pop_macro("TRANSACTION_READ_UNCOMMITTED")
#pragma pop_macro("TRANSACTION_REPEATABLE_READ")
#pragma pop_macro("TRANSACTION_SERIALIZABLE")

#endif // _java_sql_Connection_h_